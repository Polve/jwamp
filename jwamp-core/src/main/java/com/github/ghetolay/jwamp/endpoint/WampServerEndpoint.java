package com.github.ghetolay.jwamp.endpoint;

import java.io.IOException;

import javax.websocket.EncodeException;
import javax.websocket.EndpointConfig;
import javax.websocket.MessageHandler;
import javax.websocket.Session;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.github.ghetolay.jwamp.message.WampMessage;
import com.github.ghetolay.jwamp.message.WampWelcomeMessage;
import com.github.ghetolay.jwamp.session.WampSessionContext;

//What to do for wamp session id :
//- use session.getId() generated by websocket container 
//- create our own generator ?
//- configurable ?
public class WampServerEndpoint extends AbstractWampEndpoint{
	private static final Logger log = LoggerFactory.getLogger(WampServerEndpoint.class);

	public WampServerEndpoint(WampEndpointParameters parameters) {
		super(parameters);
		log.debug("Server endpoint created");
	}
	
	@Override
	public void onOpen(Session session, EndpointConfig config) {
		super.onOpen(session, config);
		
		String wampSessionId = createWampSessionId(session);
		
		final WampSessionContext wampSessionConfig = createAndRegisterWampSessionConfig(session, wampSessionId);
		
		session.addMessageHandler(new MessageHandler.Whole<WampMessage>(){

			@Override
			public void onMessage(WampMessage message) {
				wampSessionConfig.getMessageHandler().onMessage(wampSessionConfig.getWampSession(), message);
			}
		});

		
		
		try{
			session.getBasicRemote().sendObject(WampWelcomeMessage.create(wampSessionId));
			
		} catch (IOException | EncodeException e) {
			log.error("Error while sending welcome message", e);
		}
	}
	
	private static String createWampSessionId(Session session){
		return session.getId();
	}
	
}
